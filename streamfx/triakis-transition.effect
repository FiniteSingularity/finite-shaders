uniform float4x4 ViewProj<
	bool automatic = true;
	string name = "View Projection Matrix";
>;
uniform float4 ViewSize<
	bool automatic = true;
>;
uniform texture2d InputA<Z
	bool automatic = true;
>;

// Constants
#define DEG2RAD -0.0174533f
#define EPS     0.000001f
#define PI      3.14159f
#define SIN30   0.5f
#define COS30   0.8660254f
#define TAN30   0.5773503f
#define BLOBS   0
#define BLINDS  1

/**********************************
 * Modifyable Hexagon Parameters: *
 **********************************/
// Scale- Scale/Size of the rhombus relative
//        to frame width.
uniform float Scale<
	string name = "Triangle Scale";
	string field_type = "slider";
	float minimum = 1.0;
	float maximum = 1000.0;
	float step = 1.0;
> = 40.0;

// RevealDistance- How far into the frame hexagons shoudl be
//                 drawn. Scale of 0 to 100.
uniform float RevealDistance<
	string name = "Reveal Distance";
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 100.0;
	float step = 0.1;
	float scale = 0.01;
> = 0.0;
// Transparent- If true, all non-hexagon-affected pixels will
//              be transparent, allowing for layering effects.
uniform bool ITransparent<
	string name = "Make non hexagon pixels transparent";
> = false;

// RevealTransitionSize- Width (in px) of the transition zone.
//                       At the transition line, a zone of appearing
//                       hexagons will grow in the transition zone from
//                       zero to full size.
uniform float RevealTransitionSize<
	string name = "Transition Zone Size";
	string field_type = "slider";
	float minimum = 0.0;
	float maximum = 4000.0;
	float step = 1.0;
> = 100.0;

// TransitionColor- RGBA color of the transition zone background.
uniform float4 TransitionColor<
	string name = "Transition Background Color (R[0], G[1], B[2], A[3])";
	string field_type = "slider";
	float4 minimum = {0., 0., 0., 0.};
	float4 maximum = {255., 255., 255., 100.};
	float4 step = {0.01, 0.01, 0.01, 0.01};
	float4 scale = {0.0039216, 0.0039216, 0.0039216, 0.01};
> = {0., 0., 0., 50.};

uniform float TransitionAngle<
	string name = "Transition Angle";
	string field_type = "slider";
	float minimum = -180.0;
	float maximum = 180.0;
	float step = 0.01;
	//float scale = DEG2RAD;
> = 0.0;

uniform int TransitionBBEffect<
	string name = "Transition Effect";
	string field_type = "enum";
	int enum_0 = BLOBS;
	string enum_0_name = "Blobs";
	int enum_1 = BLINDS;
	string enum_1_name = "Blinds";
> = 0;

sampler_state ClampSampler {
	AddressU  = Clamp;
	AddressV  = Clamp;
	Filter    = Anisotropy;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) {
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

// Returns the cartesian coordinate of the center
// of the  rhombus containing the coordinate coord
// given a rhombus tesselation.
float2 coordToTriCenter(float2 coord, float width) {
	float v = floor(coord.y/(width*(1+SIN30)));
	float u = floor(coord.x/(width*COS30));
	bool v_even = fmod(v, 2.0) == 0.0;
	bool u_even = fmod(u, 2.0) == 0.0;
	float2 local_coord = coord - float2(u*width*COS30, v*width*(1+SIN30));

	if((v_even && u_even) || (!v_even && !u_even)) {
		// Case A
		float2 local_coord_prime = float2(
			local_coord.x,
			local_coord.y - local_coord.x * TAN30
		);
		if(local_coord_prime.y < 0.0) { // in bottom triangle
			return float2((u+1.)*width*COS30, v*width*(1.+SIN30)+0.5*width*SIN30);
		} else if(local_coord_prime.y > width) { //in top triangle
			return float2(u*width*COS30, (v+1.)*width*(1.+SIN30)-0.5*width*SIN30);
		} else if(local_coord_prime.y >= 1.13*local_coord_prime.x) {
			// local_center = 0.25*w, 0.75*w
			return float2(u*width*COS30+0.25*width, v*width*(1.+SIN30)+0.75*width + 0.25*width*TAN30);
		} else {
			//local_center = 0.75*w, 0.25*w
			return float2(u*width*COS30+0.75*width, v*width*(1.+SIN30)+0.25*width + 0.75*width*TAN30);
		}
	} else {
		// Case B
		float2 local_coord_prime = float2(
			local_coord.x,
			local_coord.y - (width*COS30-local_coord.x) * TAN30
		);
		if(local_coord_prime.y < 0.0) { // in bottom triangle
			return float2(u*width*COS30, v*width*(1.+SIN30)+0.5*width*SIN30);
		} else if(local_coord_prime.y > width) { // in top triangle
			return float2((u+1.)*width*COS30, (v+1.)*width*(1.+SIN30)-0.5*width*SIN30);
		} else if(local_coord_prime.y >= width-1.13*local_coord_prime.x) {
			return float2(u*width*COS30+0.75*width, v*width*(1.+SIN30)+0.75*width + 0.75*width*TAN30);
		} else {
			return float2(u*width*COS30+0.25*width, v*width*(1.+SIN30)+0.25*width + 0.25*width*TAN30);
		}
	}
}

// Returns the interesction of the view edge and a 
// vector passing through the center of the view.
float2 edgeIntersection(float theta) {
	float eps = EPS;
	float pi = PI;

	float a = ViewSize.x;
	float b = ViewSize.y;
	float x0 = ViewSize.x/2.;
	float y0 = ViewSize.y/2.;
	float rectAtan = atan2(b, a);
	float tanTheta = tan(theta);

	float s_theta = sin(theta);
	float c_theta = cos(theta);

	float s_theta_clamp = (abs(s_theta) > eps) ? s_theta : eps;
	float c_theta_clamp = (abs(c_theta) > eps) ? c_theta : eps;

	float x_factor = 1;
	float y_factor = 1;

	if((theta > -rectAtan) && (theta <= rectAtan)) {
		y_factor = -1;
	} else if((theta > rectAtan) && (theta <= (pi - rectAtan))) {
		y_factor = -1;
	} else if((theta > (pi - rectAtan) && (theta <= -(pi - rectAtan)))) {
		x_factor = -1;
	} else {
		x_factor = -1;
	}

	float2 z1 = float2(
								x0 + x_factor * (b * c_theta)/(2. * s_theta_clamp),
								y_factor * b/2. + y0
							);
	float2 z2 = float2(
								x_factor * a/2. + x0,
								y0 + y_factor * (a*s_theta)/(2. * c_theta_clamp)
							);

	return ( (z1.x > 0.0) && (z1.x < a) ) ? z1 : z2;
}

// Calculates the start/stop offset necessary to keep transition
// zone off-frame given an angle, edge intersect, and transition
// zone size.
float2 StartStopOffset(float2 intersect, float radAngle, float transition_size) {
	float2 nc = {0., 0.};
	float theta_delta = 0.;
	float epsilon = EPS;

	nc.x = (intersect.x < ViewSize.x/2.) ? (ViewSize.x - intersect.x) : intersect.x;
	nc.y = (intersect.y < ViewSize.y/2.) ? (ViewSize.y - intersect.y) : intersect.y;

	float m = (nc.y - ViewSize.y/2.) / (nc.x - ViewSize.x/2.);
	float zero_angle = atan(m);

	if(abs(nc.x - ViewSize.x) < epsilon) {
		theta_delta = (ViewSize.y - nc.y) * sin(zero_angle);
	} else {
		theta_delta = (ViewSize.x - nc.x) * cos(zero_angle);
	}
	return float2(
		(theta_delta + transition_size) * cos(radAngle),
		-(theta_delta + transition_size) * sin(radAngle)
	);
}

float4 PSDefault(VertData v_in) : TARGET {
	float epsilon = EPS;
	float2 frame_coord = v_in.uv * ViewSize.xy;
	float width = ViewSize.x/Scale;

	float transition_size = RevealTransitionSize;
	float angle = TransitionAngle;
	float radAngle = - angle * DEG2RAD;

	bool horizontalAngle = abs(sin(radAngle)) < epsilon;
	bool verticalAngle = abs(cos(radAngle)) < epsilon;

	float2 endIntersect = edgeIntersection(radAngle);
	float2 startIntersect = {
						abs(endIntersect.x - ViewSize.x),
						abs(endIntersect.y - ViewSize.y)
					};

	float2 delta = {0., 0.};
	if(!horizontalAngle && !verticalAngle) {
		delta = StartStopOffset(endIntersect, radAngle, transition_size + width);
	} else {
		delta = float2(
			transition_size * 1.05 * cos(radAngle),
			-transition_size * 1.05 * sin(radAngle)
		);
	}

	float2 endPoint = float2(endIntersect.x + delta.x, endIntersect.y + delta.y);
	float2 startPoint = float2(
												startIntersect.x - (delta.x - transition_size * cos(radAngle)),
												startIntersect.y - (delta.y + transition_size * sin(radAngle))
											);

	float2 transition_intersect = lerp(startPoint, endPoint, RevealDistance.xx);

	float b = 0.0;
	float m = 0.0;
	
	if(!horizontalAngle) {
		m = -(endPoint.x - startPoint.x)/(endPoint.y - startPoint.y);
		b = - m * transition_intersect.x + transition_intersect.y;
	}

	bool vertical = abs(min(endIntersect.y, startIntersect.y)) < epsilon;
	float dist_to_trans = 0.0;

	float2 local_coord = frame_coord;
	float2 sample_coord = coordToTriCenter(local_coord, width);
	float2 frame_nearest = sample_coord;

	if(!vertical) {
		float rdx = !horizontalAngle ? (frame_nearest.y - b)/m : transition_intersect.x;
		bool xp = (endPoint.x - startPoint.x) > 0;
		if( (xp && (frame_nearest.x > rdx)) || (!xp && (frame_nearest.x < rdx)) ) {
			if(ITransparent) {
				return float4(0, 0, 0, 0);
			}
			float4 pixel = InputA.Sample(ClampSampler, v_in.uv);
			return pixel;
		}
		dist_to_trans = xp ? cos(radAngle) * (rdx - frame_nearest.x) : -cos(radAngle) * (frame_nearest.x - rdx);
	} else {
		float rdy = !verticalAngle ? m*frame_nearest.x + b : transition_intersect.y;
		bool yp = (endPoint.y - startPoint.y) > 0;
		if( (yp && (frame_nearest.y > rdy)) || (!yp && (frame_nearest.y < rdy)) ) {
			if(ITransparent) {
				return float4(0, 0, 0, 0);
			}
			float4 pixel = InputA.Sample(ClampSampler, v_in.uv);
			return pixel;
		}		
		dist_to_trans = yp ? -sin(radAngle) * (rdy - frame_nearest.y) : sin(radAngle) * (frame_nearest.y - rdy);
	}

	float4 pixel = InputA.Sample(ClampSampler, sample_coord / ViewSize.xy);
	float transition_ratio = 1.0 - max((transition_size - dist_to_trans)/(transition_size), 0.0);
	float transition_rhomb_size2 = pow(1.2*width * transition_ratio, 2);
	float dist2 = 0.0;
	if(TransitionBBEffect == BLOBS) {
		dist2 = pow(frame_nearest.x - local_coord.x, 2) + pow(frame_nearest.y - local_coord.y, 2);
	} else {
		dist2 = pow(frame_nearest - local_coord, 2); //-- horisontal swipey thing
	}

	if(transition_rhomb_size2 < dist2) {
		return TransitionColor;
	}
	return pixel;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSDefault(v_in); 
	}
}
