#include "../includes/streamfx.effect"
#include "../includes/constants.effect"
#include "../includes/transition-fns.effect"
#include "../includes/noise/fractal-noise.effect"

uniform float4 Time<
	bool automatic = true;
>;

/*
 *  Electricity effect ported from sqrt_1 "Electro": https://www.shadertoy.com/view/4scGWj
 *  Simplex noise ported from Nikita Miropolskiy: https://www.shadertoy.com/view/XsX3zB
 */

uniform float RevealDistance<
  string name = "Reveal Distance";
  string field_type = "slider";
  float minimum = 0.0;
  float maximum = 100.1;
  float step = 0.1;
  float scale = 0.01;
> = 0.0;

uniform float TransitionAngle<
  string name = "Reveal Angle";
  string field_type = "slider";
  float minimum = -180.0;
  float maximum = 180.0;
  float step = 0.1;
> = 0.0;

uniform bool TimeEvolution<
  string name = "Time-based evolution";
> = true;

uniform float3 Color<
  string name = "Color";
  string field_type = "slider";
  float3 minimum = {0.0, 0.0, 0.0};
  float3 maximum = {255.0, 255.0, 255.0};
  float3 step = {0.1, 0.1, 0.1};
  float3 scale = {0.0039216, 0.0039216, 0.0039216};
> = {255., 255., 255.};

uniform float Speed<
  string name = "Speed";
  string field_type = "slider";
  float minimum = 1.0;
  float maximum = 100.0;
  float step = 0.1;
> = 10.0;

uniform float NoiseScale<
  string name = "Noise Scale";
  string field_type = "slider";
  float minimum = 1.0;
  float maximum = 1500.0;
  float step = 1.0;
> = 20.0;

uniform float Intensity<
  string name = "Bolt Intensity";
  string field_type = "slider";
  float minimum = 0.01;
  float maximum = 0.5;
  float step = 0.01;
> = 0.2;

sampler_state maskSampler {
	Filter		= Linear;
	AddressU	= Clamp;
	AddressV	= Clamp;
};

float eIntensity(float2 v_in_uv, float view_x, float2 coord, float dist, float gp) {
  float t = Time.x;
  float2 uv = v_in_uv;
  uv = uv * 2. - 1.;

  float2 p = coord/view_x;
  float z = TimeEvolution ? t/Speed : 20.0 * dist/Speed;
  float3 p3 = float3(p.x*1.0, p.y, z);

  //float intensity = noise(NoiseScale*p3 + 100.0);

  float intensity = FractalNoise(
    NoiseScale * p3.xy,
    NT_SOFT_LINEAR,
    FT_BASIC,
    OVERFLOW_TYPE_ALLOW_HDR,
    1.0, 
    0.0,
    false,
    0.7,
    float2(0.0, 0.0), 
    0.0,
    0.57,
    6.0, 
    12345,
    false,
    1,
    NoiseScale * z, 
    false
  );

  return intensity;
}

float electricity(float2 v_in_uv, float view_x, float2 coord, float dist, float gp) {
  float t = Time.x;
  float2 uv = v_in_uv;
  uv = uv * 2. - 1.;

  float2 p = coord/view_x;
  float z = TimeEvolution ? t/Speed : 20.0 * dist/Speed;
  float3 p3 = float3(p.x*1.0, p.y, z);

  //float intensity = noise(NoiseScale*p3 + 100.0);

  float intensity = FractalNoise(
    NoiseScale * p3.xy,
    NT_SOFT_LINEAR,
    FT_BASIC,
    OVERFLOW_TYPE_ALLOW_HDR,
    1.0, 
    0.0,
    false,
    0.7,
    float2(0.0, 0.0), 
    0.0,
    0.57,
    6.0, 
    12345,
    false,
    1,
    NoiseScale * z, 
    false
  );

  float y = abs(-0.15*intensity + 2.0 * (v_in_uv[1]));
  float g = pow(y, gp);
  return g;
}

float2 TranslateRotate(float2 global, float2 hk, float a) {
  float2 xy_prime = float2(
    cos(a) * global[0] - sin(a) * global[1] + hk[0] * cos(a) - hk[1] * sin(a),
    sin(a) * global[0] + cos(a) * global[1] + hk[0] * sin(a) + hk[1] * cos(a)
  );
  return xy_prime;
}


float4 PSDefault(VertData v_in) : TARGET {
  float epsilon = EPS;
  float2 frame_coord = v_in.uv * ViewSize.xy;
  float dist = 1.16 * RevealDistance - 0.08;

  float radAngle = TransitionAngle * DEG2RAD;
  float planeAngle = (90 - TransitionAngle) * DEG2RAD;

  bool horizontalAngle = abs(sin(radAngle)) < epsilon;
  bool verticalAngle = abs(cos(radAngle)) < epsilon;

  float transition_size = 0.0;

  // Transform global pixel coordinate to local coordinate
  // system where transition is at y=0 and is horizontal.

  float2 endIntersect = edgeIntersection(radAngle);
  float2 startIntersect = {
    abs(endIntersect.x - ViewSize.x),
    abs(endIntersect.y - ViewSize.y)
  };

  float2 delta = {0., 0.};
  if(!horizontalAngle && !verticalAngle) {
    delta = StartStopOffset(endIntersect, radAngle, transition_size);
  } else {
    delta = float2(
      transition_size * cos(radAngle),
      -transition_size * sin(radAngle)
    );
  }

  float2 endPoint = float2(endIntersect.x + delta.x, endIntersect.y + delta.y);
  float2 startPoint = float2(
    startIntersect.x - (delta.x),
    startIntersect.y - (delta.y)
  );
  float2 curPoint = startPoint + dist * (endPoint-startPoint);
  float2 xy_prime = TranslateRotate(frame_coord, -curPoint, -planeAngle);
  float2 uv_prime = xy_prime / ViewSize.xy;

  // Get electricity intensity
  float g = electricity(uv_prime, ViewSize.xy[0], xy_prime, dist, Intensity);

  // float3 col = float3(2.0, 2.0, 2.0);
  // col = col * -g + col;
  // col = pow(col, 5);
  // float alpha = (col.x+col.y+col.z)/3.0;
  // //float i = eIntensity(uv_prime, ViewSize.xy[0], xy_prime, dist, Intensity);
  // float alpha3 = pow(alpha, 3.0);
  // if(uv_prime.y > 0.08 && uv_prime.y < 0.085) {
  //   return float4(0.5, 0.5, 0.5, 1.0);
  // }
  // return float4(alpha3, alpha3, alpha3, 1.0);
  // return float4(col*Color, alpha) + float4(i, i, i, 1.0-alpha);

  bool show = uv_prime[1] < 0.075;
  // Detect bottom (masked) edge of transition.
  if(uv_prime[1]<0.075 && uv_prime[1]>=0.00) {
    float2 tuv = uv_prime;
    tuv.y -= 0.005;
    while(tuv[1] > 0.0) {
      float2 tcoord = tuv * ViewSize.xy;
      float tg = electricity(tcoord/ViewSize.xy, ViewSize.xy[0], tcoord, dist, Intensity);
      float3 col = float3(2.0, 2.0, 2.0);
      col = col * -tg + col;
      col = pow(col, 5);
      float alpha = (col.x+col.y+col.z)/3.0;
      float alpha3 = pow(alpha, 3.0);
      
      if(alpha3 > 0.3) {
        show = false;
        break;
      }
      tuv.y -= 0.005;
    }
  }

  // // Detect top (unmasked) edge of transition.
  // if(uv_prime[1] > -0.05 && uv_prime[1]<=0.00) {
  //   show=true;
  //   float2 tuv = uv_prime;
  //   tuv.y -= 0.005;
  //   while(tuv.y > -0.05) {
  //     float2 tcoord = tuv * ViewSize.xy;
  //     float tg = electricity(tuv, ViewSize.xy[0], tcoord, dist, Intensity);
  //     float3 col = float3(2.0, 2.0, 2.0);
  //     col = col * -g + col;
  //     col = pow(col, 5);
  //     float alpha = (col.x+col.y+col.z)/3.0;
  //     float alpha3 = pow(alpha, 3.0);
  //     if(alpha > 0.9) {
  //       show=false;
  //       break;
  //     }
  //     tuv.y -= 0.005;
  //   }
  // }

  float3 col = float3(2.0, 2.0, 2.0);
  col = col * -g + col;
  col = pow(col, 5);
  float a = pow((col.x + col.y + col.z)/3.0, 1.0);
  col *= Color;
  if(show) {
    float4 bgPixel = InputA.Sample(maskSampler, v_in.uv);
    return float4(col.rgb + bgPixel.rgb * (1.0 - a), 1.0);
  }
  return float4(col, a);
}

technique Draw
{
  pass
  {
    vertex_shader = VSDefault(v_in);
    pixel_shader  = PSDefault(v_in); 
  }
}
