/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */
float3 random3(float3 c) {
	float j = 4096.0*sin(dot(c,float3(17.0, 59.4, 15.0)));
	float3 r;
	r.z = frac(512.0*j);
	j *= .125;
	r.x = frac(512.0*j);
	j *= .125;
	r.y = frac(512.0*j);
	return r-0.5;
}

/* murmur hash to generate random unsigned integers */
uint murmurHash(uint2 x, uint seed) {
  const uint m = 0x5bd1e995U;
  uint hash = seed;
  // process first vector element
  uint k = x.x; 
  k *= m;
  k ^= k >> 24;
  k *= m;
  hash *= m;
  hash ^= k;
  // process second vector element
  k = x.y; 
  k *= m;
  k ^= k >> 24;
  k *= m;
  hash *= m;
  hash ^= k;
	// some final mixing
  hash ^= hash >> 13;
  hash *= m;
  hash ^= hash >> 15;
  return hash;
}

/* rgba white noise using murmur hash */
float4 rgbaWhiteNoise(float2 pos, uint seed) {
  return float4(
    float(murmurHash(uint2(uint(pos.x), uint(pos.y)), seed))/float(0xffffffffU),
    float(murmurHash(uint2(uint(pos.x+10000), uint(pos.y+10000)), seed))/float(0xffffffffU),
    float(murmurHash(uint2(uint(pos.x+20000), uint(pos.y+20000)), seed))/float(0xffffffffU),
    float(murmurHash(uint2(uint(pos.x+30000), uint(pos.y+30000)), seed))/float(0xffffffffU)
  );
  return float4(1.0, 1.0, 1.0, 1.0);
}

/* skew constants for 3d simplex functions */
const float F3 =  0.3333333;
const float G3 =  0.1666667;

/* 3d simplex noise */
float simplex3d(float3 p) {
	 /* 1. find current tetrahedron T and it's four vertices */
	 /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */
	 /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/
	 
	 /* calculate s and x */
	 float3 s = floor(p + dot(p, float3(F3, F3, F3)));
	 float3 x = p - s + dot(s, float3(G3, G3, G3));
	 
	 /* calculate i1 and i2 */
	 float3 e = step(float3(0.0, 0.0, 0.0), x - x.yzx);
	 float3 i1 = e*(1.0 - e.zxy);
	 float3 i2 = 1.0 - e.zxy*(1.0 - e);
	 	
	 /* x1, x2, x3 */
	 float3 x1 = x - i1 + G3;
	 float3 x2 = x - i2 + 2.0*G3;
	 float3 x3 = x - 1.0 + 3.0*G3;
	 
	 /* 2. find four surflets and store them in d */
	 float4 w, d;
	 
	 /* calculate surflet weights */
	 w.x = dot(x, x);
	 w.y = dot(x1, x1);
	 w.z = dot(x2, x2);
	 w.w = dot(x3, x3);
	 
	 /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */
	 w = max(0.6 - w, 0.0);
	 
	 /* calculate surflet components */
	 d.x = dot(random3(s), x);
	 d.y = dot(random3(s + i1), x1);
	 d.z = dot(random3(s + i2), x2);
	 d.w = dot(random3(s + 1.0), x3);
	 
	 /* multiply d by w^4 */
	 w *= w;
	 w *= w;
	 d *= w;
	 
	//  /* 3. return the sum of the four surflets */
	 return dot(d, float4(52.0, 52.0, 52.0, 52.0));
}

float simplexFractalNoise(float3 m) {
    return   0.5333333*simplex3d(m)
			+0.2666667*simplex3d(2.0*m)
			+0.1333333*simplex3d(4.0*m)
			+0.0666667*simplex3d(8.0*m);
}


float2 GetGradient(float2 intPos, float t) {
    
    // Uncomment for calculated rand
    float rand = frac(sin(dot(intPos, float2(12.9898, 78.233))) * 43758.5453);;
    
    // Texture-based rand (a bit faster on my GPU)
    //float rand = texture(iChannel0, intPos / 64.0).r;
    
    // Rotate gradient: random starting rotation, random rotation rate
    float angle = 6.283185 * rand + 4.0 * t * rand;
    return float2(cos(angle), sin(angle));
}


float Pseudo3dNoise(float3 pos) {
    float2 i = floor(pos.xy);
    float2 f = pos.xy - i;
    float2 blend = f * f * (3.0 - 2.0 * f);
    float noiseVal = 
        lerp(
            lerp(
                dot(GetGradient(i + float2(0, 0), pos.z), f - float2(0, 0)),
                dot(GetGradient(i + float2(1, 0), pos.z), f - float2(1, 0)),
                blend.x),
            lerp(
                dot(GetGradient(i + float2(0, 1), pos.z), f - float2(0, 1)),
                dot(GetGradient(i + float2(1, 1), pos.z), f - float2(1, 1)),
                blend.x),
        blend.y
    );
    return noiseVal / 0.7; // normalize to about [-1..1]
}
