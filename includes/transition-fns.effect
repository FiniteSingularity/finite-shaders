// Transforms the coordinate x,y to y,x.
float2 reverseCoords(float2 coord) {
	return float2(coord.y, coord.x);
}

// Returns the interesction of the view edge and a 
// vector passing through the center of the view.
float2 edgeIntersection(float theta) {
	float eps = EPS;
	float pi = PI;

	float a = ViewSize.x;
	float b = ViewSize.y;
	float x0 = ViewSize.x/2.;
	float y0 = ViewSize.y/2.;
	float rectAtan = atan2(b, a);
	float tanTheta = tan(theta);

	float s_theta = sin(theta);
	float c_theta = cos(theta);

	float s_theta_clamp = (abs(s_theta) > eps) ? s_theta : eps;
	float c_theta_clamp = (abs(c_theta) > eps) ? c_theta : eps;

	float x_factor = 1;
	float y_factor = 1;

	if((theta > -rectAtan) && (theta <= rectAtan)) {
		y_factor = -1;
	} else if((theta > rectAtan) && (theta <= (pi - rectAtan))) {
		y_factor = -1;
	} else if((theta > (pi - rectAtan) && (theta <= -(pi - rectAtan)))) {
		x_factor = -1;
	} else {
		x_factor = -1;
	}

	float2 z1 = float2(
								x0 + x_factor * (b * c_theta)/(2. * s_theta_clamp),
								y_factor * b/2. + y0
							);
	float2 z2 = float2(
								x_factor * a/2. + x0,
								y0 + y_factor * (a*s_theta)/(2. * c_theta_clamp)
							);

	return ( (z1.x > 0.0) && (z1.x < a) ) ? z1 : z2;
}

// Calculates the start/stop offset necessary to keep transition
// zone off-frame given an angle, edge intersect, and transition
// zone size.
float2 StartStopOffset(float2 intersect, float radAngle, float transition_size) {
	float2 nc = {0., 0.};
	float theta_delta = 0.;
	float epsilon = EPS;

	nc.x = (intersect.x < ViewSize.x/2.) ? (ViewSize.x - intersect.x) : intersect.x;
	nc.y = (intersect.y < ViewSize.y/2.) ? (ViewSize.y - intersect.y) : intersect.y;

	float m = (nc.y - ViewSize.y/2.) / (nc.x - ViewSize.x/2.);
	float zero_angle = atan(m);

	if(abs(nc.x - ViewSize.x) < epsilon) {
		theta_delta = (ViewSize.y - nc.y) * sin(zero_angle);
	} else {
		theta_delta = (ViewSize.x - nc.x) * cos(zero_angle);
	}
	return float2(
		(theta_delta + transition_size) * cos(radAngle),
		-(theta_delta + transition_size) * sin(radAngle)
	);
}
